<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Fernando Correia&#39;s Blog</title>
    <link>https://fernandocorreia.dev/tags/golang/</link>
    <description>Recent content in golang on Fernando Correia&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2020, Fernando de Alcantara Correia; all rights reserved.</copyright>
    <lastBuildDate>Wed, 19 Aug 2020 03:27:35 +0000</lastBuildDate>
    
	<atom:link href="https://fernandocorreia.dev/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Golang: Resources for learning Go</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-6/</link>
      <pubDate>Wed, 19 Aug 2020 03:27:35 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-6/</guid>
      <description>This is part 6 of my journey learning Golang.
Books and tutorials  A Tour of Go: An introduction that covers the most important features of the language. An Introduction to Programming in Go: A free e-book from 2012. Introducing Go: An O&amp;rsquo;Reilly book from 2016. &amp;ldquo;Perfect for beginners familiar with programming basics, this hands-on guide provides an easy introduction to Go.&amp;rdquo;  Chat  Go IRC Channel: Get live support at #go-nuts on irc.</description>
    </item>
    
    <item>
      <title>Learning Golang: Comments</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-5/</link>
      <pubDate>Tue, 18 Aug 2020 04:02:00 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-5/</guid>
      <description>This is part 5 of my journey learning Golang.
Inline comments Go ignores text to the right of //:
1// This entire line is ignored by the compiler. 2// fmt.Println(&amp;#34;Does NOT print&amp;#34;) 3fmt.Println(&amp;#34;This gets printed!&amp;#34;) // This part gets ignored Block comments All lines between /* and */ will be ignored:
1/* 2This is ignored. 3This is also ignored. 4fmt.Println(&amp;#34;This WON&amp;#39;T print!&amp;#34;) 5*/ Godoc Go has a tool for automatically generating documentation from Go source code: Godoc.</description>
    </item>
    
    <item>
      <title>Learning Golang: Function declarations</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-4/</link>
      <pubDate>Sun, 16 Aug 2020 17:31:12 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-4/</guid>
      <description>This is part 4 of my journey learning Golang.
Function declarations Functions are reusable blocks of code. For example:
1func main () { 2 fmt.Println(&amp;#34;Hello, World!&amp;#34;) 3} The func keyword declares a function. It is followed by the function&amp;rsquo;s name, a list of arguments (delimited by parenthesis) and the function block (delimited by curly braces).
main function In Go, the main function is special. When the main function is defined in the main package, it is automatically called when the program is executed.</description>
    </item>
    
    <item>
      <title>Learning Golang: Packages</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-3/</link>
      <pubDate>Sun, 16 Aug 2020 02:12:03 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-3/</guid>
      <description>This is part 3 of my journey learning Golang.
Package declaration The first line of a Go source file is the &amp;ldquo;package declaration&amp;rdquo;, defined by the package keyword.
This serves a few purposes:
 It provides a structure for grouping related source files. It provides a mechanism for code reuse. It differentiates between executable packages from utility packages (i.e. libraries).  Example:
1package main go build will produce an executable binary file for source files with package main.</description>
    </item>
    
    <item>
      <title>Learning Golang: Compiling and running Go programs</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-2/</link>
      <pubDate>Sun, 16 Aug 2020 01:55:20 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-2/</guid>
      <description>This is part 2 of my journey learning Golang.
Compiling Go programs An individual Go source file can be compiled with the go build command:
1go build {filename}.go That will produce an executable binary file if the source&amp;rsquo;s package is main (see Part 3 for more on packages).
The resulting binary can be executed with this command:
1./{filename} Example:
1$ go build main.go 2$ ./main 3Hello World Running from source The go run command combines the two previous steps: it builds a binary from a source file and executes it:</description>
    </item>
    
    <item>
      <title>Learning Golang: Getting Started</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-1/</link>
      <pubDate>Sun, 16 Aug 2020 01:30:03 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-1/</guid>
      <description>This is part 1 of my journey learning Golang.
The Go programming language (Golang) is becoming more relevant by the day. It is, famously, the language of the Docker and Kubernetes projects. Both have had a huge impact on how companies run applications, and I develop for them on a daily basis. Golang is also seeing increased adotoption at my company.
I&amp;rsquo;m starting on a journey to become more familiar with this language.</description>
    </item>
    
  </channel>
</rss>