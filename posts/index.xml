<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fernando Correia&#39;s Blog</title>
    <link>https://fernandocorreia.dev/posts/</link>
    <description>Recent content in Posts on Fernando Correia&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020, Fernando de Alcantara Correia; all rights reserved.</copyright>
    <lastBuildDate>Sat, 19 Sep 2020 16:09:07 +0000</lastBuildDate>
    
	<atom:link href="https://fernandocorreia.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Golang: Scan, Scanln and Scanf</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-18/</link>
      <pubDate>Sat, 19 Sep 2020 16:09:07 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-18/</guid>
      <description>This is part 18 of my journey learning Golang.
Command line interface When building programs that run on a terminal it is often useful to be able to allow the user to enter text.
For instance the ssh-keygen utility will prompt for a path and a passphrase.
1❯ ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34; 2Generating public/private rsa key pair. 3Enter file in which to save the key (/home/fernando/.ssh/id_rsa): /tmp/test_rsa 4Enter passphrase (empty for no passphrase): 5Enter same passphrase again: Scan The Scan method of the fmt package will read a single space-separated token (like a single word) from the standard input device (which is usually the console).</description>
    </item>
    
    <item>
      <title>Learning Golang: Sprint, Sprintln, Sprintf</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-17/</link>
      <pubDate>Wed, 16 Sep 2020 03:09:15 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-17/</guid>
      <description>This is part 17 of my journey learning Golang.
The fmt package has methods like Print, Println and Printf to print text to the standard output device.
It also has corresponding methods that return the strings that would be printed out, instead of actually printing them out. Afterwards the program can use the returned values for any purpose like for instance sending an email or creating a PDF file.
Sprint Returns a string containing the input arguments.</description>
    </item>
    
    <item>
      <title>Learning Golang: Printf</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-16/</link>
      <pubDate>Tue, 15 Sep 2020 03:39:46 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-16/</guid>
      <description>This is part 16 of my journey learning Golang.
The Printf method The Printf method from the fmt package writes a formatted string to standard output.
Printf makes it possible to interpolate strings. This is done by leaving placeholders in a string, and using values to fill in these placeholders.
Printf syntax Printf accepts a string argument, potentially with formatting placeholders, and zero or more value arguments. For example:
1package main 2 3import ( 4 &amp;#34;fmt&amp;#34; 5) 6 7func main() { 8 answer := &amp;#34;C&amp;#34; 9 fmt.</description>
    </item>
    
    <item>
      <title>Registering a website with Google Search Console</title>
      <link>https://fernandocorreia.dev/posts/google-search-console/</link>
      <pubDate>Sat, 12 Sep 2020 17:24:50 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/google-search-console/</guid>
      <description>Google has a free tool called Search Console that &amp;ldquo;help you measure your site&amp;rsquo;s Search traffic and performance, fix issues, and make your site shine in Google Search results&amp;rdquo;.
This is super handy to make sure that your website is being properly indexed by Google, to keep on top of how much traffic it is getting, and to be on the lookout for errors.
Registering your website with Google It only takes a few simple steps to add your website to Google&amp;rsquo;s Search Console:</description>
    </item>
    
    <item>
      <title>Learning Golang: Println and Print</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-15/</link>
      <pubDate>Sat, 12 Sep 2020 04:21:49 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-15/</guid>
      <description>This is part 15 of my journey learning Golang.
fmt Package Go&amp;rsquo;s fmt package implements formatted I/O with formatting functions in the venerable, old-school style of the C language, but modernized.
This article covers the most basic functions for printing out text Println and Print:
Println The Println method prints outs a line of text to the standard output device.
It prints its arguments, with a space between them, and a new line character at the end.</description>
    </item>
    
    <item>
      <title>Learning Golang: Assigning and printing variables</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-14/</link>
      <pubDate>Fri, 11 Sep 2020 03:59:46 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-14/</guid>
      <description>This is part 14 of my journey learning Golang.
As an exercise for Codecademy&amp;rsquo;s Learn Go course, I wrote my second Go program.
It simulates a catalog for a comic book store.
At this point the course has only covered the most fundamental parts of Go, like variables, simple data types, basic arithmetic, and printing. Arrays and functions are still out of the picture.
For that reason, the structure of the program is very primitive and there is a lot of repetition (room for improvement).</description>
    </item>
    
    <item>
      <title>Learning Golang: Strings</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-13/</link>
      <pubDate>Tue, 08 Sep 2020 01:35:40 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-13/</guid>
      <description>This is part 13 of my journey learning Golang.
Strings in Go Strings represent a sequence of bytes. More specifically, a read-only slice of uint8 integers.
Their main use is for representing text. This text is usually, but not necessarily, encoded as UTF-8. In Go, strings can also be used to represent text in any encoding, and also raw bytes, not necessarily corresponding to text.
It&amp;rsquo;s important to notice that strings can be empty (i.</description>
    </item>
    
    <item>
      <title>Learning Golang: Compilation Errors</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-12/</link>
      <pubDate>Mon, 07 Sep 2020 21:06:17 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-12/</guid>
      <description>This is part 12 of my journey learning Golang.
Compile-time errors Go is a compiled language. That means that it will parse the source code and produce an executable binary file from it.
The compiler parses the code according to strictly defined rules. That allows Go programs to run more efficiently than if they were interpreted as they run.
As a valuable side-effect, it will reveal many kinds of errors (like typos or invalid code) immediately when the programs are compiled, as opposed to only when that particular part of the program is executed.</description>
    </item>
    
    <item>
      <title>Learning Golang: Variables</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-11/</link>
      <pubDate>Sun, 06 Sep 2020 18:13:20 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-11/</guid>
      <description>This is part 11 of my journey learning Golang.
Variables A variable is a named value that can change during the execution of a program. The difference from a constant (which is also a named value) is that a variable&amp;rsquo;s value can be modified at run time.
Variable declarations In Go, variables are declared following this pattern: var {identifier} {type}. Examples:
1var songName string 2var lengthOfSong uint16 3var isMusicOver bool 4var songRating float32 Zero values If a value is not assigned to the variable when it is declared (like above) then it is initialized with a &amp;ldquo;zero value&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Learning Golang: Literals and Constants</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-10/</link>
      <pubDate>Sun, 06 Sep 2020 17:55:33 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-10/</guid>
      <description>This is part 10 of my journey learning Golang.
Literals In Go, values can be many things. Just to name a few, values can be numbers (like 109), or text wrapped in quotes (like &amp;ldquo;Hello world&amp;rdquo;).
Literals are values written in the source code. For example:
1fmt.Println(&amp;#34;Hello, world!&amp;#34;) // String literal 2fmt.Println(42) // Integer literal 3fmt.Println(3.141592653589793238) // Floating point literal Constants In addition to literal values (i.e. values directly expressed in the source code), Go also allows &amp;ldquo;named values&amp;rdquo;, i.</description>
    </item>
    
    <item>
      <title>Learning Golang: Basic data types</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-9/</link>
      <pubDate>Wed, 26 Aug 2020 03:29:48 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-9/</guid>
      <description>This is part 9 of my journey learning Golang.
Data types are a designation by a programming language about the kind of values that are being stored.
Go has several basic data types built in. This article explores boolean, numeric and string data types. See Go&amp;rsquo;s documentation for more details.
Boolean data type Boolean values can be either false (equivalent to 0) or true (equivalent to 1). Although in principle they only require 1 bit of storage, Go uses a byte for convenience reasons.</description>
    </item>
    
    <item>
      <title>Learning Golang: Running Go in a container</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-8/</link>
      <pubDate>Sat, 22 Aug 2020 01:55:41 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-8/</guid>
      <description>This is part 8 of my journey learning Golang.
Reproducible build &amp;amp; run environments Over the years, it is not uncommon that different projects in the same language will have different requirements about the versions of the tools and libraries that they require.
For instance, I learned that there are differences in the behavior of the GO111MODULE environment variable across Go versions 1.12 and 1.13.
That&amp;rsquo;s why when I start a repository for a new project, one of the first things I do is to set up scripts for building and running the code in a reproducible way.</description>
    </item>
    
    <item>
      <title>Learning Golang: Multiline strings</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-7/</link>
      <pubDate>Fri, 21 Aug 2020 03:18:04 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-7/</guid>
      <description>This is part 7 of my journey learning Golang.
My first assignment on Codecademy&amp;rsquo;s Learn Go course was to create a program that prints out ASCII art.
The way that&amp;rsquo;s different from a &amp;ldquo;Hello, World&amp;rdquo; program is that it needs to print multiple lines. So it was a great opportunity to learn about how multi-line strings can be represented in Go.
Go&amp;rsquo;s string literals String literals represent &amp;ldquo;string constants&amp;rdquo; i.e. immutable string values in a Go source file.</description>
    </item>
    
    <item>
      <title>Learning Golang: Resources for learning Go</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-6/</link>
      <pubDate>Wed, 19 Aug 2020 03:27:35 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-6/</guid>
      <description>This is part 6 of my journey learning Golang.
Books and tutorials  A Tour of Go: An introduction that covers the most important features of the language. An Introduction to Programming in Go: A free e-book from 2012. For the Love of Go: Fundamentals: An interactive introduction to the Go programming language, suitable for complete beginners. Introducing Go: An O&amp;rsquo;Reilly book from 2016. &amp;ldquo;Perfect for beginners familiar with programming basics, this hands-on guide provides an easy introduction to Go.</description>
    </item>
    
    <item>
      <title>Learning Golang: Comments</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-5/</link>
      <pubDate>Tue, 18 Aug 2020 04:02:00 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-5/</guid>
      <description>This is part 5 of my journey learning Golang.
Inline comments Go ignores text to the right of //:
1// This entire line is ignored by the compiler. 2// fmt.Println(&amp;#34;Does NOT print&amp;#34;) 3fmt.Println(&amp;#34;This gets printed!&amp;#34;) // This part gets ignored Block comments All lines between /* and */ will be ignored:
1/* 2This is ignored. 3This is also ignored. 4fmt.Println(&amp;#34;This WON&amp;#39;T print!&amp;#34;) 5*/ Godoc Go has a tool for automatically generating documentation from Go source code: Godoc.</description>
    </item>
    
    <item>
      <title>Learning Golang: Function declarations</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-4/</link>
      <pubDate>Sun, 16 Aug 2020 17:31:12 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-4/</guid>
      <description>This is part 4 of my journey learning Golang.
Function declarations Functions are reusable blocks of code. For example:
1func main () { 2 fmt.Println(&amp;#34;Hello, World!&amp;#34;) 3} The func keyword declares a function. It is followed by the function&amp;rsquo;s name, a list of arguments (delimited by parenthesis) and the function block (delimited by curly braces).
main function In Go, the main function is special. When the main function is defined in the main package, it is automatically called when the program is executed.</description>
    </item>
    
    <item>
      <title>Learning Golang: Packages</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-3/</link>
      <pubDate>Sun, 16 Aug 2020 02:12:03 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-3/</guid>
      <description>This is part 3 of my journey learning Golang.
Package declaration The first line of a Go source file is the &amp;ldquo;package declaration&amp;rdquo;, defined by the package keyword.
This serves a few purposes:
 It provides a structure for grouping related source files. It provides a mechanism for code reuse. It differentiates between executable packages from utility packages (i.e. libraries).  Example:
1package main go build will produce an executable binary file for source files with package main.</description>
    </item>
    
    <item>
      <title>Learning Golang: Compiling and running Go programs</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-2/</link>
      <pubDate>Sun, 16 Aug 2020 01:55:20 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-2/</guid>
      <description>This is part 2 of my journey learning Golang.
Compiling Go programs An individual Go source file can be compiled with the go build command:
1go build {filename}.go That will produce an executable binary file if the source&amp;rsquo;s package is main (see Part 3 for more on packages).
The resulting binary can be executed with this command:
1./{filename} Example:
1$ go build main.go 2$ ./main 3Hello World Running from source The go run command combines the two previous steps: it builds a binary from a source file and executes it:</description>
    </item>
    
    <item>
      <title>Learning Golang: Getting Started</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-1/</link>
      <pubDate>Sun, 16 Aug 2020 01:30:03 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-1/</guid>
      <description>This is part 1 of my journey learning Golang.
The Go programming language (Golang) is becoming more relevant by the day. It is, famously, the language of the Docker and Kubernetes projects. Both have had a huge impact on how companies run applications, and I develop for them on a daily basis. Golang is also seeing increased adotoption at my company.
I&amp;rsquo;m starting on a journey to become more familiar with this language.</description>
    </item>
    
    <item>
      <title>Custom domain with GitHub Pages</title>
      <link>https://fernandocorreia.dev/posts/github-pages-custom-domain/</link>
      <pubDate>Sat, 15 Aug 2020 04:35:19 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/github-pages-custom-domain/</guid>
      <description>I am hosting my blog on GitHub Pages. I wanted to use my own domain name instead of a github.io subdomain.
GitHub&amp;rsquo;s documentation is very helpful. Even so, it took me some effort to figure out all the details, so I&amp;rsquo;m going to share what I learned.
These instructions are for using an &amp;ldquo;apex domain&amp;rdquo; e.g. fernandocorreia.dev. The settings are a bit different when using a subdomain like www.fernandocorreia.dev. Again, GitHub&amp;rsquo;s documentation is very helpful and does a good job of explaining these differences.</description>
    </item>
    
    <item>
      <title>New Blog</title>
      <link>https://fernandocorreia.dev/posts/new-blog/</link>
      <pubDate>Thu, 13 Aug 2020 21:42:46 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/new-blog/</guid>
      <description>I decided to start a new blog to talk about software development.
It&amp;rsquo;s been about 5 years since I last had a blog, so I went looking for what people are using in 2020.
It turns out that Hugo is quite popular for building static sites.
Two of its selling points are that it is super fast, and that people have built hundreds of good-looking themes so that you can hit the ground running.</description>
    </item>
    
  </channel>
</rss>