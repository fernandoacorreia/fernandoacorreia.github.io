<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fernando Correia&#39;s Blog</title>
    <link>https://fernandocorreia.dev/</link>
    <description>Recent content on Fernando Correia&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2020, Fernando de Alcantara Correia; all rights reserved.</copyright>
    <lastBuildDate>Wed, 26 Aug 2020 03:29:48 +0000</lastBuildDate>
    
	<atom:link href="https://fernandocorreia.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Golang: Basic data types</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-9/</link>
      <pubDate>Wed, 26 Aug 2020 03:29:48 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-9/</guid>
      <description>This is part 9 of my journey learning Golang.
Data types are a designation by a programming language about the kind of values that are being stored.
Go has several basic data types built in. This article explores boolean, numeric and string data types. See Go&amp;rsquo;s documentation for more details.
Boolean data type Boolean values can be either false (equivalent to 0) or true (equivalent to 1). Although in principle they only require 1 bit of storage, Go uses a byte for convenience reasons.</description>
    </item>
    
    <item>
      <title>Learning Golang: Running Go in a container</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-8/</link>
      <pubDate>Sat, 22 Aug 2020 01:55:41 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-8/</guid>
      <description>This is part 8 of my journey learning Golang.
Reproducible build &amp;amp; run environments Over the years, it is not uncommon that different projects in the same language will have different requirements about the versions of the tools and libraries that they require.
For instance, I learned that there are differences in the behavior of the GO111MODULE environment variable across Go versions 1.12 and 1.13.
That&amp;rsquo;s why when I start a repository for a new project, one of the first things I do is to set up scripts for building and running the code in a reproducible way.</description>
    </item>
    
    <item>
      <title>Learning Golang: Multiline strings</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-7/</link>
      <pubDate>Fri, 21 Aug 2020 03:18:04 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-7/</guid>
      <description>This is part 7 of my journey learning Golang.
My first assignment on Codecademy&amp;rsquo;s Learn Go course was to create a program that prints out ASCII art.
The way that&amp;rsquo;s different from a &amp;ldquo;Hello, World&amp;rdquo; program is that it needs to print multiple lines. So it was a great opportunity to learn about how multi-line strings can be represented in Go.
Go&amp;rsquo;s string literals String literals represent &amp;ldquo;string constants&amp;rdquo; i.e. immutable string values in a Go source file.</description>
    </item>
    
    <item>
      <title>Learning Golang: Resources for learning Go</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-6/</link>
      <pubDate>Wed, 19 Aug 2020 03:27:35 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-6/</guid>
      <description>This is part 6 of my journey learning Golang.
Books and tutorials  A Tour of Go: An introduction that covers the most important features of the language. An Introduction to Programming in Go: A free e-book from 2012. Introducing Go: An O&amp;rsquo;Reilly book from 2016. &amp;ldquo;Perfect for beginners familiar with programming basics, this hands-on guide provides an easy introduction to Go.&amp;rdquo;  Chat  Go IRC Channel: Get live support at #go-nuts on irc.</description>
    </item>
    
    <item>
      <title>Learning Golang: Comments</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-5/</link>
      <pubDate>Tue, 18 Aug 2020 04:02:00 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-5/</guid>
      <description>This is part 5 of my journey learning Golang.
Inline comments Go ignores text to the right of //:
1// This entire line is ignored by the compiler. 2// fmt.Println(&amp;#34;Does NOT print&amp;#34;) 3fmt.Println(&amp;#34;This gets printed!&amp;#34;) // This part gets ignored Block comments All lines between /* and */ will be ignored:
1/* 2This is ignored. 3This is also ignored. 4fmt.Println(&amp;#34;This WON&amp;#39;T print!&amp;#34;) 5*/ Godoc Go has a tool for automatically generating documentation from Go source code: Godoc.</description>
    </item>
    
    <item>
      <title>Learning Golang: Function declarations</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-4/</link>
      <pubDate>Sun, 16 Aug 2020 17:31:12 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-4/</guid>
      <description>This is part 4 of my journey learning Golang.
Function declarations Functions are reusable blocks of code. For example:
1func main () { 2 fmt.Println(&amp;#34;Hello, World!&amp;#34;) 3} The func keyword declares a function. It is followed by the function&amp;rsquo;s name, a list of arguments (delimited by parenthesis) and the function block (delimited by curly braces).
main function In Go, the main function is special. When the main function is defined in the main package, it is automatically called when the program is executed.</description>
    </item>
    
    <item>
      <title>Learning Golang: Packages</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-3/</link>
      <pubDate>Sun, 16 Aug 2020 02:12:03 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-3/</guid>
      <description>This is part 3 of my journey learning Golang.
Package declaration The first line of a Go source file is the &amp;ldquo;package declaration&amp;rdquo;, defined by the package keyword.
This serves a few purposes:
 It provides a structure for grouping related source files. It provides a mechanism for code reuse. It differentiates between executable packages from utility packages (i.e. libraries).  Example:
1package main go build will produce an executable binary file for source files with package main.</description>
    </item>
    
    <item>
      <title>Learning Golang: Compiling and running Go programs</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-2/</link>
      <pubDate>Sun, 16 Aug 2020 01:55:20 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-2/</guid>
      <description>This is part 2 of my journey learning Golang.
Compiling Go programs An individual Go source file can be compiled with the go build command:
1go build {filename}.go That will produce an executable binary file if the source&amp;rsquo;s package is main (see Part 3 for more on packages).
The resulting binary can be executed with this command:
1./{filename} Example:
1$ go build main.go 2$ ./main 3Hello World Running from source The go run command combines the two previous steps: it builds a binary from a source file and executes it:</description>
    </item>
    
    <item>
      <title>Learning Golang: Getting Started</title>
      <link>https://fernandocorreia.dev/posts/learning-golang-part-1/</link>
      <pubDate>Sun, 16 Aug 2020 01:30:03 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/learning-golang-part-1/</guid>
      <description>This is part 1 of my journey learning Golang.
The Go programming language (Golang) is becoming more relevant by the day. It is, famously, the language of the Docker and Kubernetes projects. Both have had a huge impact on how companies run applications, and I develop for them on a daily basis. Golang is also seeing increased adotoption at my company.
I&amp;rsquo;m starting on a journey to become more familiar with this language.</description>
    </item>
    
    <item>
      <title>Custom domain with GitHub Pages</title>
      <link>https://fernandocorreia.dev/posts/github-pages-custom-domain/</link>
      <pubDate>Sat, 15 Aug 2020 04:35:19 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/github-pages-custom-domain/</guid>
      <description>I am hosting my blog on GitHub Pages. I wanted to use my own domain name instead of a github.io subdomain.
GitHub&amp;rsquo;s documentation is very helpful. Even so, it took me some effort to figure out all the details, so I&amp;rsquo;m going to share what I learned.
These instructions are for using an &amp;ldquo;apex domain&amp;rdquo; e.g. fernandocorreia.dev. The settings are a bit different when using a subdomain like www.fernandocorreia.dev. Again, GitHub&amp;rsquo;s documentation is very helpful and does a good job of explaining these differences.</description>
    </item>
    
    <item>
      <title>New Blog</title>
      <link>https://fernandocorreia.dev/posts/new-blog/</link>
      <pubDate>Thu, 13 Aug 2020 21:42:46 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/posts/new-blog/</guid>
      <description>I decided to start a new blog to talk about software development.
It&amp;rsquo;s been about 5 years since I last had a blog, so I went looking for what people are using in 2020.
It turns out that Hugo is quite popular for building static sites.
Two of its selling points are that it is super fast, and that people have built hundreds of good-looking themes so that you can hit the ground running.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://fernandocorreia.dev/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fernandocorreia.dev/about/</guid>
      <description>I&amp;rsquo;ve been a software engineer for over 30 years, working mostly on enterprise software.
Currently I&amp;rsquo;m a Principal Software Engineer at Domino Data Lab, where we&amp;rsquo;re building a leading data science platform.
We&amp;rsquo;re hiring!
Any opinions expressed on this website are my own, not my employer&amp;rsquo;s.</description>
    </item>
    
  </channel>
</rss>